name: Build Windows EXE (cx_Freeze)

on:
  push:
  pull_request:

jobs:
  build-windows:
    runs-on: windows-latest

    env:
      PYTHON_VERSION: "3.10"
      ENTRY_SCRIPT: "main.py"
      APP_NAME: "UmaHelper"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Python info
        shell: pwsh
        run: |
          python -V
          pip -V

      - name: Install build tooling
        shell: pwsh
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install cx-Freeze==7.2.5

      - name: Install project dependencies
        shell: pwsh
        run: |
          pip install `
            numpy==1.26.4 `
            opencv-python-headless==4.6.0.66 `
            paddlepaddle==2.6.1 `
            paddleocr==2.7.3 `
            Pillow==10.3.0 `
            rapidfuzz==3.6.1 `
            PySide6==6.5.3 `
            mss==9.0.1

      - name: Sanity check imports (paddle vs paddlepaddle)
        shell: pwsh
        run: |
          python - << 'PY'
          import sys
          try:
              import paddle
              print("OK: import paddle ->", getattr(paddle, '__version__', 'unknown'))
          except Exception as e:
              print("FAIL: import paddle:", e); sys.exit(1)
          try:
              import paddlepaddle  # should NOT exist as a module
              print("Unexpected: 'paddlepaddle' is importable")
              sys.exit(1)
          except Exception:
              print("OK: 'paddlepaddle' is not a module (as expected)")
          PY

      - name: Show setup script (ensure it does not mention 'paddlepaddle')
        shell: pwsh
        run: |
          Select-String -Path setup_cxfreeze.py -Pattern "paddlepaddle" -SimpleMatch -CaseSensitive | % { $_ } || echo "OK: no 'paddlepaddle' string"

      - name: Clean previous build
        shell: pwsh
        run: |
          python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"

      - name: Build with cx_Freeze
        shell: pwsh
        env:
          ENTRY_SCRIPT: ${{ env.ENTRY_SCRIPT }}
        run: |
          python setup_cxfreeze.py build

      - name: List build output
        shell: pwsh
        run: |
          Get-ChildItem -Recurse build | Select-Object FullName

      - name: Upload EXE and build folder
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-win-cxfreeze
          path: |
            build\exe*\${{ env.APP_NAME }}.exe
            build\exe*\
          if-no-files-found: error
