name: Build UmaHelper (cx_Freeze, Windows)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      PYTHON_VERSION: "3.10"
      APP_NAME: "UmaHelper"
      ENTRY_SCRIPT: "main.py"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Python info
        shell: pwsh
        run: |
          python -V
          pip -V

      - name: Install build tooling
        shell: pwsh
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install cx-Freeze==7.2.5

      - name: Install dependencies (pinned)
        shell: pwsh
        run: |
          pip install `
            numpy==1.26.4 `
            opencv-python-headless==4.6.0.66 `
            paddlepaddle==2.6.1 `
            paddleocr==2.7.3 `
            Pillow==10.3.0 `
            rapidfuzz==3.6.1 `
            PySide6==6.5.3 `
            mss==9.0.1

      # (optional) sanity check using a PowerShell here-string piped to python -
      - name: Sanity check imports (PowerShell-safe)
        shell: pwsh
        run: |
          @'
          import sys, importlib.util
          try:
              import paddle
              print("OK: import paddle ->", getattr(paddle, "__version__", "unknown"))
              import paddleocr
              print("OK: import paddleocr")
          except Exception as e:
              print("Import check failed:", e); sys.exit(1)
          if importlib.util.find_spec("paddlepaddle") is None:
              print("OK: 'paddlepaddle' is not a module (expected)")
          else:
              print("Unexpected: 'paddlepaddle' is importable"); sys.exit(1)
          '@ | python -

      # (optional) pre-download models WITHOUT heredocs; disabled by default
      # - name: Pre-download PaddleOCR models (optional)
      #   shell: pwsh
      #   run: |
      #     @'
      #     import os
      #     from pathlib import Path
      #     os.environ["PADDLEOCR_HOME"] = str((Path(".")/"paddle_models").resolve())
      #     from paddleocr import PaddleOCR
      #     PaddleOCR(lang="en", use_gpu=False)
      #     print("Models saved to:", os.environ["PADDLEOCR_HOME"])
      #     '@ | python -

      - name: Clean previous build (PowerShell-safe)
        shell: pwsh
        run: |
          python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"

      - name: Build with cx_Freeze
        shell: pwsh
        env:
          APP_NAME: ${{ env.APP_NAME }}
          ENTRY_SCRIPT: ${{ env.ENTRY_SCRIPT }}
        run: |
          python setup_cxfreeze.py build

      - name: List build output
        shell: pwsh
        run: |
          Get-ChildItem -Recurse build | Select-Object FullName

      - name: Upload EXE and build folder
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-win-cxfreeze
          path: |
            build\exe*\${{ env.APP_NAME }}.exe
            build\exe*\
          if-no-files-found: error
